import imageService from "@/services/imageService"
import dotenv from "dotenv"

dotenv.config()

async function testImagesFonds() {
  console.log("üñºÔ∏è  TEST DES IMAGES AVEC FONDS UNSPLASH")
  console.log("=".repeat(50))

  // V√©rifier la configuration Unsplash
  const hasUnsplash = !!process.env.UNSPLASH_ACCESS_KEY
  console.log(`Unsplash configur√©: ${hasUnsplash ? "‚úÖ" : "‚ùå"}`)

  if (!hasUnsplash) {
    console.log("‚ö†Ô∏è  Configurez UNSPLASH_ACCESS_KEY pour tester les images de fond")
    return
  }

  // Citations de test pour diff√©rents th√®mes
  const testCitations = [
    {
      content: "Chaque jour est une nouvelle opportunit√© de grandir et de s'√©panouir.",
      author: "AutoPublish",
      theme: "motivation",
    },
    {
      content: "La beaut√© de la vie r√©side dans les petits moments de bonheur.",
      author: "Sage Anonyme",
      theme: "bonheur",
    },
    {
      content: "L'amour est la force la plus puissante de l'univers.",
      author: "Philosophe",
      theme: "amour",
    },
  ]

  console.log(`\nüé® Test de g√©n√©ration d'images pour ${testCitations.length} citations`)

  for (let i = 0; i < testCitations.length; i++) {
    const citation = testCitations[i]
    console.log(`\n${i + 1}. üìù Citation: "${citation.content.substring(0, 40)}..."`)
    console.log(`   üè∑Ô∏è  Th√®me: ${citation.theme}`)
    console.log(`   üë§ Auteur: ${citation.author}`)

    try {
      console.log("   üîÑ G√©n√©ration en cours...")

      // G√©n√©rer les variations (maintenant avec photo Unsplash)
      const images = await imageService.generateVariations(citation, [
        "minimal",
        "gradient",
        "photo",
      ])

      console.log(`   ‚úÖ ${images.length} image(s) g√©n√©r√©e(s):`)

      images.forEach((image, index) => {
        console.log(`      ${index + 1}. ${image.metadata.template} - ${image.filename}`)
        console.log(`         üìÅ Taille: ${Math.round(image.buffer.length / 1024)}KB`)
        console.log(
          `         üìê Dimensions: ${image.metadata.width}x${image.metadata.height}`
        )
      })

      // V√©rifier si une image avec fond Unsplash a √©t√© cr√©√©e
      const photoImage = images.find((img) => img.metadata.template === "photo")
      if (photoImage) {
        console.log(`   üéâ Image avec fond Unsplash cr√©√©e: ${photoImage.filename}`)
      } else {
        console.log(`   ‚ö†Ô∏è  Pas d'image Unsplash (fallback utilis√©)`)
      }
    } catch (error: any) {
      console.log(`   ‚ùå Erreur: ${error.message}`)
    }
  }

  console.log("\nüìä R√âSUM√â:")
  console.log("‚úÖ Templates disponibles:")
  console.log("   ‚Ä¢ minimal - Fond de couleur simple")
  console.log("   ‚Ä¢ gradient - D√©grad√© de couleurs")
  console.log("   ‚Ä¢ photo - Image de fond Unsplash (NOUVEAU)")

  console.log("\nüìÅ Localisation des images:")
  console.log("   /Users/franck/Documents/autopublish/public/images/generated/")

  console.log("\nüí° Les images avec fond Unsplash:")
  console.log("   ‚Ä¢ Utilisent des photos r√©elles li√©es au th√®me")
  console.log("   ‚Ä¢ Ont un overlay sombre pour la lisibilit√©")
  console.log("   ‚Ä¢ Texte blanc avec ombre pour le contraste")
  console.log("   ‚Ä¢ Guillemets et auteur en dor√©")

  console.log("\nüöÄ Prochaines √©tapes:")
  console.log("   ‚Ä¢ V√©rifiez les images g√©n√©r√©es")
  console.log("   ‚Ä¢ Les images photo sont plus attractives pour Instagram")
  console.log("   ‚Ä¢ Le syst√®me choisit automatiquement des images selon le th√®me")
}

testImagesFonds()
